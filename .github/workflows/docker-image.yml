name: Deploy
on:
  push:
    branches: [ "deploy" ]

env:
  APP_VERSION: "${{ github.run_number }}"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Log in to Docker Hub or another registry (assumes using Docker Hub)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push server image
      - name: Build and push server Docker image
        run: |
          docker build ./server -t ${{ secrets.DOCKER_USERNAME }}/server:$APP_VERSION 
          docker build ./server -t ${{ secrets.DOCKER_USERNAME }}/server:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/server:$APP_VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/server:latest
          
      - name: List docker image
        run: docker image ls
      
      # Build and push client image
      - name: Build and push client Docker image
        run: |
          docker build ./client \
            -t ${{ secrets.DOCKER_USERNAME }}/client:$APP_VERSION \
            -t ${{ secrets.DOCKER_USERNAME }}/client:latest \
            --build-arg REACT_APP_SERVER_URL=http://server:3000
          docker push ${{ secrets.DOCKER_USERNAME }}/client:$APP_VERSION 
          docker push ${{ secrets.DOCKER_USERNAME }}/client:latest
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Check APP_VERSION
        run: echo $APP_VERSION
      - name: SSH and Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/kj-kloudify
            ls
            echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" > .env
            echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
            echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
            echo "DYNAMO_TABLE_NAME=${{ secrets.DYNAMO_TABLE_NAME }}" >> .env
            echo "TERRAFORM_BUCKET=${{ secrets.TERRAFORM_BUCKET }}" >> .env
            echo "TERRAFORM_LAMBDA_FUNCTION=${{ secrets.TERRAFORM_LAMBDA_FUNCTION }}" >> .env
            echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
            
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker image prune -af
            sudo docker pull ausitn/server
            sudo docker pull ausitn/client 
            docker image ls
            sudo docker compose -f docker-compose.yml up -d
            docker ps